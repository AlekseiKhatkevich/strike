syntax = 'proto3';

package strike;

import 'google/protobuf/timestamp.proto';

// компиляция
//python -m grpc_tools.protoc -I /usr/include/google/protobuf/timestamp.proto
// --python_out=./compiled --proto_path=/home/hardcase/PycharmProjects/strike/serializers/proto/
// --pyi_out=./compiled --grpc_python_out=./compiled  conflicts.proto

service ConflictsService {
  rpc CreateConflict(Conflict) returns (SingleConflictResponse) {};
  rpc DeleteConflict(SingleIdRequest) returns (EmptyResponse) {};
  rpc UpdateConflict(Conflict) returns (SingleConflictResponse) {};
}

// Типы возможных конфликтов. Зеркалит ConflictTypes в SA модели Conflict.
enum ConflictTypes {
  UNSPECIFIED = 0;
  PAYMENT = 1;
  LAYOFF = 2;
  LIQUIDATION = 3;
  OTHER = 4;
  DISMISSAL = 5;
  MANAGEMENT_POLITICS = 6;
  WORK_CONDITIONS = 7;
  LABOR_HOURS = 8;
  COLLECTIVE_AGREEMENT = 9;
  PAYMENT_DELAY = 10;
  LABOUR_RIGHTS = 11;
}

// конфликт
message Conflict {
  optional int64 id = 1;
  ConflictTypes type = 2;
  Duration duration = 3;
  int64 enterprise_id = 4;
  string description = 5;
  optional string results = 6;
  optional float success_rate = 7;
}

// один конфликт с дополнительными данными
message SingleConflictResponse {
  Conflict conflict = 1;
  ConflictExtraData extra_data = 2;
}

// дополнительные данные для конфликта
message ConflictExtraData {
  optional google.protobuf.Timestamp updated_at = 1;
  google.protobuf.Timestamp created_at = 2;
}

// период времени от t1 до t2
message Duration {
  google.protobuf.Timestamp lower = 1;
  optional google.protobuf.Timestamp upper = 2;
}

// пустое сообщение используется для респонсов.
message EmptyResponse {}

// запрос чего либо по конкретному id: int
message SingleIdRequest {
  int64 id = 1;
}

//// The `Status` type defines a logical error model that is suitable for
//// different programming environments, including REST APIs and RPC APIs.
//message Status {
//  // A simple error code that can be easily handled by the client. The
//  // actual error code is defined by `google.rpc.Code`.
//  int32 code = 1;
//
//  // A developer-facing human-readable error message in English. It should
//  // both explain the error and offer an actionable resolution to it.
//  string message = 2;
//
//  // Additional error information that the client code can use to handle
//  // the error, such as retry info or a help link.
//  repeated google.protobuf.Any details = 3;
//}
